stages:
  - build
  - deploy

#--------------------------------RULES-------------------------------#
#DEV
.client_web_rules_dev: &client_web_rules_dev
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - client/web/**/*
        - .gitlab-ci.yml

.strapi_rules_dev: &strapi_rules_dev
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
      changes:
        - server/skapa/**/*
        - .gitlab-ci.yml

.deploy_rules_dev: &deploy_rules_dev
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'

#PREPROD
.client_web_rules_preprod: &client_web_rules_preprod
  rules:
    - if: '$CI_COMMIT_BRANCH == "preprod"'
      changes:
        - client/web/**/*
        - .gitlab-ci.yml

.strapi_rules_preprod: &strapi_rules_preprod
  rules:
    - if: '$CI_COMMIT_BRANCH == "preprod"'
      changes:
        - server/skapa/**/*
        - .gitlab-ci.yml

.deploy_rules_preprod: &deploy_rules_preprod
  rules:
    - if: '$CI_COMMIT_BRANCH == "preprod"'

#---------------------------------BUILD------------------------------#

.build_image: &build_image
  stage: build
  image: docker:latest
  services:
    - docker:18.09-dind
  retry:
    max: 1
    when:
      - script_failure
  before_script:
    - 'docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY'
  script:
    - cd $FOLDER
    - docker build -t $IMAGE:$TAG $ARG .
    - docker push $IMAGE:$TAG

#DEV
build_web_dev:
  <<: *build_image
  <<: *client_web_rules_dev
  stage: build
  variables:
    IMAGE: ${CI_REGISTRY_IMAGE}/staging/web
    FOLDER: ./client/web/
    ARG: '${WEB_BUILD_ARGS_STAGING} -f Dockerfile.dev'
    TAG: staging

build_strapi_dev:
  <<: *build_image
  <<: *strapi_rules_dev
  variables:
    IMAGE: ${CI_REGISTRY_IMAGE}/staging/strapi
    TAG: staging
    FOLDER: ./server/skapa
    ARG: '-f Dockerfile.dev'

#PREPROD
build_web_preprod:
  <<: *build_image
  <<: *client_web_rules_preprod
  stage: build
  variables:
    IMAGE: ${CI_REGISTRY_IMAGE}/preprod/web
    FOLDER: ./client/web/
    ARG: '${WEB_BUILD_ARGS_PREPROD} -f Dockerfile.preprod'
    TAG: preprod

build_strapi_preprod:
  <<: *build_image
  <<: *strapi_rules_preprod
  variables:
    IMAGE: ${CI_REGISTRY_IMAGE}/preprod/strapi
    TAG: preprod
    FOLDER: ./server/skapa
    ARG: '-f Dockerfile.preprod'

#---------------------------------DEPLOY-------------------------------#

.deploy_all: &deploy_all
  stage: deploy
  image: alpine:latest
  services:
    - docker:18.09-dind
  variables:
    USER: ''
    HOST: ''
    PATH_COMPOSE: ''
    COMPOSE_FILE: ''
  before_script:
    - apk update
    - apk add --update openssh-client bash
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - scp ${COMPOSE_FILE} ${USER}@${HOST}:${PATH_COMPOSE}/docker-compose.yml
    - ssh ${USER}@${HOST} "cd ${PATH_COMPOSE} && docker-compose pull && docker-compose up -d"

#DEV
deploy_dev:
  <<: *deploy_all
  <<: *deploy_rules_dev
  stage: deploy
  environment: staging
  variables:
    USER: ${DEPLOYMENT_USER}
    HOST: ${DEPLOYMENT_IP_STAGING}
    PATH_COMPOSE: /root/Hairun-Project/skapa-staging
    COMPOSE_FILE: 'docker-compose.staging.yml'

#PREPROD
deploy_preprod:
  <<: *deploy_all
  <<: *deploy_rules_preprod
  stage: deploy
  environment: preproduction
  variables:
    USER: ${DEPLOYMENT_USER}
    HOST: ${DEPLOYMENT_IP_PREPROD}
    PATH_COMPOSE: /root/Hairun-Project/skapa-preprod
    COMPOSE_FILE: 'docker-compose.preprod.yml'



